# Configuration file for message2action
# All values must be specified in the following way:
# <VALUE>=<example>
# Do not leave a blank neither between <VALUE> nor <example>.
# Number of charackters per line must not exceed 200.
# Filesize of message2action.ini must not exceed 4096 bytes
# All charackters behind # (hashtag) will be ignored.

# name of file without path which will be used to create the message with the stop-command for message2action (maximum 20 charackters):
message2action_stop_filename=message2action.stop

# list of 10 cell-phone numbers we accept SMS from:
# Note: Format must be for german numbers: 49<number> without any '+' or '00' in front
receivingfrom_cell_phone00=4999
receivingfrom_cell_phone01=4999
receivingfrom_cell_phone02=4999
receivingfrom_cell_phone03=4999
receivingfrom_cell_phone04=4999
# receivingfrom_cell_phone05=4999
# receivingfrom_cell_phone06=4999
# receivingfrom_cell_phone07=4999
# receivingfrom_cell_phone08=4999
# receivingfrom_cell_phone09=4999

# path where message2action reads incoming SMS-text-messages (maximum 80 characters):
path_incoming_SMS=/var/spool/sms/incoming/

# path where message2action writes sending SMS-text-messages (maximum 80 characters):
path_outgoing_SMS=/var/spool/sms/outgoing/

# path where the read and processed SMS-text-messages will be moved after reading and processing (maximum 80 characters)
path_processed_SMS=/home/pi/message2action/smsprocessed/

# path + filename where process-id of the current programm is written to when processing incoming SMS:
fullpath_smsfile_PID=/home/pi/message2action/smspid

# mailaddresses which are valid to receive mails from and send back to:
mail_address_00=dummyuser@pathfinder-outlander.lit
mail_address_01=dummyuser@pathfinder-outlander.lit
mail_address_02=dummyuser@pathfinder-outlander.lit
mail_address_03=dummyuser@pathfinder-outlander.lit
mail_address_04=dummyuser@pathfinder-outlander.lit
mail_address_05=dummyuser@pathfinder-outlander.lit
#mail_address_06=user@yourdomain.com
#mail_address_07=user@yourdomain.com
#mail_address_08=user@yourdomain.com
#mail_address_09=user@yourdomain.com

# path where message2action reads incoming mails (maximum 80 characters):
path_incoming_mail=/home/pi/mail/

# path where message2action writes sending mails (maximum 80 characters):
path_outgoing_mail=/home/pi/mail/outgoing/

# path where the read and processed mails will be moved after reading and processing (maximum 80 characters)
path_processed_mail=/home/pi/message2action/mailprocessed/

# path + filename where process-id of the current programm is written to when processing incoming mails:
fullpath_mailfile_PID=/home/pi/message2action/mailpid

# path + filename where logfile of SMS2action is saved (maximum 80 characters):
file_logfile=/home/pi/message2action/message2action.log

# maximum size of the logfile expressed in kbytes (1 kByte = 1024 bytes):
# if logfile is greater than this size the logfile will be divided by 2: the oldest lines will be deleted.
max_size_logfile=500

# time for waiting for next SMS specified in seconds:
wait_time_next_sms=2

# time for waiting for next mail specified in seconds:
wait_time_next_mail=4

# path where content of outgoing message to telegram bot is written:
path_outgoing_telegram=/home/pi/telegram/outgoing_to_bot/

# path for incoming telegram:
path_incoming_telegram=/home/pi/telegram/

# path for saving processed telegram:
path_processed_telegram=/home/pi/message2action/telegramprocessed/

# path + filename where process-id of the current programm is written to when processing incoming Telegram messages:
fullpath_telegramfile_PID=/home/pi/message2action/telegrampid

# time for waiting for next telegram specified in seconds:
wait_time_next_telegram=2

# stop-command for message2action (maximum 20 charackters), this is a build-in-command:
message2action_stop_command=stop

# shutdown-command for the Raspberry (maximum 80 characters), this is a build-in-command:
shutdown_pi_command=shutdown

# reboot-command for the Raspberry (maximum 80 characters), this is a build-in-command:
reboot_pi_command=reboot

# status-command for the Raspberry (maximum 80 charackters), this is a build-in command:
status_pi_command=status

# help-command for message2action (maximum 80 charackters), this is a build-in command:
message2action_help_command=help

# questionmark-command for message2action (maximum 80 charackters), this is a build-in command:
message2action_questionmark_command=?

# config-command for message2action (maximum 80 charackters), this is a build-in command:
message2action_config_command=config

# specifies number of days how old files should be maximum in directory for processed files (incoming and outgoing).
# 0 = no garbage collecting at all
garbage_collection_days=30

# now we have 10 commands which will be executed on the raspberry (maximum 80 charackters for the command), they are external commands:
CMD00=date > /home/pi/message2action/test2.log
#CMD01=date01
#CMD02=date02
#CMD03=date03
#CMD04=date04
#CMD05=date05
#CMD06=date06
#CMD07=date07
#CMD08=date08
#CMD09=date09

# now we have 10 MAC-adresses which can be used for sending the WOL (wake up on LAN) broadcast message to. They are internal commands
# Adresses have to specified with 6 values each separated by a dooubledot ':' like this sample: 1B:5F:64:96:EB:B5
# only values '0' to '9' and 'A' to 'F' are allowed
WOL00=1A:1B:1C:1D:1E:1F;host=summer	
WOL01=2A:2B:2C:2D:2E:2F;host=winter
WOL02=3A:3B:3C:3D:3E:3F;ip=10.10.10.10
WOL03=4A:4B:4C:4D:4E:4F;ip=10.10.10.11
#WOL02=00:00:00:00:00:02
#WOL03=00:00:00:00:00:03
WOL04=00:00:00:00:00:04;ip=10.10.10.12
#WOL05=00:00:00:00:00:05
#WOL06=00:00:00:00:00:06
#WOL07=00:00:00:00:00:07
#WOL08=00:00:00:00:00:08
#WOL09=00:00:00:00:00:09

# suffix following WOL00 to WOL09 which lets message2action ask for onine-status of the device with the MAC-adress (maximum 20 chars)):
online_status_command_suffix=stat

# wait time in se
conds for checking onlinestatus after sending WOL to device:
# 0 = no checking automatically
check_online_status_waittime=30

# we can specify up to 10 chat-ids which are recognized as valid ones:
telegram_chat_id_00=999999999
telegram_chat_id_01=999999999
#telegram_chat_id_02=999999999
#telegram_chat_id_03=999999999
#telegram_chat_id_04=
#telegram_chat_id_05=
#telegram_chat_id_06=
#telegram_chat_id_07=
#telegram_chat_id_08=
#telegram_chat_id_09=

# Telegram-token of my bot:
telegram_bot_token=my_telegram_bot_token


# END OF INI-FILE
